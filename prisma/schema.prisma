// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name  String
  username String @unique
  password String @unique
  prefferedtopics String[]
   createdAt  DateTime @default(now())
  publishedAt   DateTime @updatedAt
  Comment Comments[]
  Blog   Blog[]
  likes  Like[]


 
}
model Blog {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String?
  title  String
  description String?
  category  String
  tags        String[]
  published Boolean @default(true)
  createdAt  DateTime @default(now())
  publishedAt   DateTime @updatedAt
  comments  Comments[]  
  likes   Like[]
 


  authorId String @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])

 
}

model Like{
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user  User? @relation(fields: [userId], references: [id])
  blogId String @db.ObjectId
  blog  Blog? @relation(fields: [blogId], references: [id])
  liked Boolean @default(true)
}
model Comments {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  text  String
  blogId String @db.ObjectId
  blog       Blog   @relation(fields: [blogId], references: [id])
  
  createdAt  DateTime @default(now())
   publishedAt   DateTime @updatedAt
  authorId String @db.ObjectId
  author     User   @relation(fields: [authorId], references: [id])

  

  
}
